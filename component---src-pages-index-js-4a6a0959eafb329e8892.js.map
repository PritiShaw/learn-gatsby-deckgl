{"version":3,"sources":["webpack:///./src/components/map.js","webpack:///./src/data/mapboxtoken.js","webpack:///./src/components/sidegraph.js","webpack:///./src/pages/index.js"],"names":["Map","state","viewport","latitude","longitude","zoom","pitch","bearing","render","_this2","this","scatterPlot","ScatterplotLayer","id","data","props","locations","opacity","stroked","filled","radiusScale","radiusMinPixels","lineWidthMinPixels","getPosition","d","position","getFillColor","grid","GridLayer","colorRange","pickable","extruded","cellSize","elevationScale","onClick","_ref","object","onSelectArea","react_default","a","createElement","esm","initialViewState","controller","layers","dist_esm","Object","assign","mapboxApiAccessToken","onViewportChange","setState","React","Component","Sidegraph","dayCount","map","day","label","count","points","forEach","p","bin","Date","parseInt","timestamp","getDay","style","right","zIndex","height","width","backgroundColor","padding","margin","join","es6","strokeDasharray","dataKey","fill","Main","sidegraphIsOpen","focusArea","allLocationDataJson","nodes","slice","loc","timestampMs","longitudeE7","latitudeE7","accuracy","sidegraph","query"],"mappings":"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","file":"component---src-pages-index-js-4a6a0959eafb329e8892.js","sourcesContent":["import React from 'react';\nimport DeckGL, { ScatterplotLayer, GridLayer } from 'deck.gl'\nimport ReactMapGL from 'react-map-gl'\n\nimport MAPBOX_ACCESS_TOKEN from '../data/mapboxtoken'\n\nclass Map extends React.Component {\n  state = {\n    viewport: {\n      latitude: 13.7525,\n      longitude: 100.494167,\n      zoom: 12,\n      pitch: 0,\n      bearing: 0\n    }\n  }\n  render() {\n    const scatterPlot = new ScatterplotLayer({\n      id: 'scatterplot-layer',\n      data: this.props.locations,\n      opacity: 0.1,\n      stroked: false,\n      filled: true,\n      radiusScale: 6,\n      radiusMinPixels: 2,\n      lineWidthMinPixels: 1,\n      getPosition: d => d.position,\n      getFillColor: [200, 0, 200]  \n    })\n\n    const grid = new GridLayer({\n      id: 'grid-layer',\n      data: this.props.locations,\n      colorRange: [[50, 240, 100, 45],[50, 240, 100, 95],[50, 240, 100, 135],[50, 240, 100, 175],[50, 240, 100, 215],[50, 240, 100, 255]],\n      pickable: true,\n      extruded: false,\n      cellSize: 600,\n      elevationScale: 4,\n      opacity: 0.5,\n      getPosition: d => d.position,\n      onClick: ({ object }) => {\n        this.props.onSelectArea(object)\n      }\n    });\n\n    return (\n      <DeckGL\n        initialViewState={this.state.viewport}\n        controller={true}\n        layers={[grid, scatterPlot]}\n      >\n        <ReactMapGL \n          mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n          {...this.state.viewport}\n          onViewportChange={(viewport) => this.setState({viewport})}\n        />\n      </DeckGL>\n    )\n  }\n}\n\nexport default Map","const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1Ijoid2l0aGVlcCIsImEiOiJjanVoem56bDcxMmQ5NGRzMDBoMDkzZmVjIn0.Sp5W6q-zk9kSepCOFtcieA'\n\nexport default MAPBOX_ACCESS_TOKEN","import React from 'react'\nimport { ResponsiveContainer, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from 'recharts'\n\nconst Sidegraph = ({ data }) => {\n  const dayLabel = ['S', 'M', 'T', 'W', 'TH', 'F', 'SA']\n  let dayCount = dayLabel.map(day => ({\n    label: day,\n    count: 0\n  }))\n\n  data.points.forEach(p => {\n    const date = new Date(parseInt(p.timestamp))\n    const bin = date.getDay()\n    \n    dayCount[bin].count++\n  })\n\n  return (\n    <div style={{ position: 'fixed', right: 0, zIndex: 100, height: '100vh', width: '25vw' }}>\n      <div style={{ backgroundColor: 'white', padding: '5px', margin: '10px' }}>\n        <h3>{ data.position.join(', ')}</h3>\n        <p>Total { data.count } points</p>\n      </div>\n\n      <div style={{ backgroundColor: 'white', padding: '5px', margin: '10px' }}>\n        <strong>Day of week count</strong>\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <BarChart data={dayCount} >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"label\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"count\" fill=\"#8884d8\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  )\n}\n\nexport default Sidegraph","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Map from '../components/map'\nimport Sidegraph from '../components/sidegraph'\n\nclass Main extends React.Component {\n  state = {\n    sidegraphIsOpen: false,\n    focusArea: {}\n  }\n\n  render () {\n    const locations = this.props.data.allLocationDataJson.nodes.slice(0, 5000).map(loc => ({\n      timestamp: loc.timestampMs,\n      position: [loc.longitudeE7/10000000, loc.latitudeE7/10000000],\n      accuracy: loc.accuracy\n    }))\n\n    return (\n      <div style={{ width: '100vw', height: '100vh' }}>\n        <h2 style={{ position: 'fixed', zIndex: '100' }}>Hello Gatsby + Deck.gl</h2>\n        <Map locations={locations} onSelectArea={object => this.setState({ sidegraphIsOpen: true, focusArea: object })}></Map>\n        { this.state.sidegraphIsOpen && \n          <Sidegraph data={this.state.focusArea}></Sidegraph>\n        }\n        \n      </div>\n    )\n  }\n}\n\nexport default Main\n\nexport const query = graphql`\n  query {\n    allLocationDataJson {\n      nodes {\n        timestampMs,\n        latitudeE7,\n        longitudeE7,\n        accuracy\n      }\n    }\n  }\n`"],"sourceRoot":""}